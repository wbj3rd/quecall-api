import { Getter } from '@loopback/core';
import { DataObject, DefaultCrudRepository, Entity, Filter, juggler, Where } from '@loopback/repository';
import { Count } from '@loopback/repository/src/common-types';
import { Options } from 'loopback-datasource-juggler';
import { IAuthUser } from 'loopback4-authentication';
import { SoftDeleteEntity } from '../models';
export declare abstract class SoftCrudRepository<T extends SoftDeleteEntity, ID, Relations extends object = {}> extends DefaultCrudRepository<T, ID, Relations> {
    protected readonly getCurrentUser?: Getter<IAuthUser | undefined> | undefined;
    constructor(entityClass: typeof Entity & {
        prototype: T;
    }, dataSource: juggler.DataSource, getCurrentUser?: Getter<IAuthUser | undefined> | undefined);
    find(filter?: Filter<T>, options?: Options): Promise<(T & Relations)[]>;
    findAll(filter?: Filter<T>, options?: Options): Promise<(T & Relations)[]>;
    findOne(filter?: Filter<T>, options?: Options): Promise<(T & Relations) | null>;
    findOneIncludeSoftDelete(filter?: Filter<T>, options?: Options): Promise<(T & Relations) | null>;
    getPkFieldName(): string;
    findById(id: ID, filter?: Filter<T>, options?: Options): Promise<T & Relations>;
    findByIdIncludeSoftDelete(id: ID, filter?: Filter<T>, options?: Options): Promise<T & Relations>;
    updateAll(data: DataObject<T>, where?: Where<T>, options?: Options): Promise<Count>;
    count(where?: Where<T>, options?: Options): Promise<Count>;
    delete(entity: T, options?: Options): Promise<void>;
    deleteAll(where?: Where<T>, options?: Options): Promise<Count>;
    deleteById(id: ID, options?: Options): Promise<void>;
    /**
     * Method to perform hard delete of entries. Take caution.
     * @param entity
     * @param options
     */
    deleteHard(entity: T, options?: Options): Promise<void>;
    /**
     * Method to perform hard delete of entries. Take caution.
     * @param entity
     * @param options
     */
    deleteAllHard(where?: Where<T>, options?: Options): Promise<Count>;
    /**
     * Method to perform hard delete of entries. Take caution.
     * @param entity
     * @param options
     */
    deleteByIdHard(id: ID, options?: Options): Promise<void>;
    private getUserId;
}
